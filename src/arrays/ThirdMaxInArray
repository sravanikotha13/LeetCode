/*******

Problem Statement:

Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
Example 2:
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
Example 3:
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.

*******/

class Solution {
    public int thirdMax(int[] nums) {
        
        Integer first=null;
        Integer second=null;
        Integer third = null;       
        for (Integer current: nums) {
            if((current.equals(first)) || (current.equals(second)) || (current.equals(third))){
                continue;                
            }else if(first == null || first<current){
                third = second;
                second = first;
                first = current;
            }else if(second == null || second<current){
                third = second;
                second = current;
            }else if(third == null || third<current){
                third=current;
            }
        }
        return third == null?first:third;
    }
}
